# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install ASIO
      run: sudo apt-get install libasio-dev

    - name: Install MySQL C++ Connection
      run: sudo apt-get install libmysqlcppconn-dev

    - name: Get Crow
      working-directory: ${{github.workspace}}/IndividualMiniprojectC++/external_libraries
      run: wget https://github.com/CrowCpp/Crow/releases/download/v1.2.0/Crow-1.2.0.zip

    - name: Unzip Crow
      working-directory: ${{github.workspace}}/IndividualMiniprojectC++/external_libraries
      run: unzip Crow-1.2.0.zip

    - name: Get Boost
      working-directory: ${{github.workspace}}/IndividualMiniprojectC++/external_libraries
      run: wget https://archives.boost.io/release/1.86.0/source/boost_1_86_0.tar.gz

    - name: Unzip Boost
      working-directory: ${{github.workspace}}/IndividualMiniprojectC++/external_libraries
      run: tar -xvf boost_1_86_0.tar.gz
          
    - name: Install cpplint
      run: pip install cpplint

    - name: Install cppcheck
      run: sudo apt-get install cppcheck

    - name: Start MySQL Server
      run: sudo systemctl start mysql.service

    - name: Create file for DB commands
      run: touch db_commands.txt

    - name: Populate db commands
      run: echo "CREATE SCHEMA ase; CREATE TABLE `appointment` (`id` varchar(150) NOT NULL, `title` varchar(150) NOT NULL, `location` varchar(150) NOT NULL, `start_time` datetime NOT NULL, `end_time` datetime NOT NULL, PRIMARY KEY (`id`));" > db_commands.txt

    - name: Create schema and table on MySQL Database
      run: sudo mysql --user=root --password=root < db_commands.txt

    - name: Create DB password file
      working-directory: ${{github.workspace}}/IndividualMiniprojectC++/build
      run: touch database.txt

    - name: Populate DB password file
      working-directory: ${{github.workspace}}/IndividualMiniprojectC++/build
      run: echo "root" > database.txt

    #- name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
     # run: cmake -B ${{github.workspace}}/IndividualMiniprojectC++/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: CMake Setup
      working-directory: ${{github.workspace}}/IndividualMiniprojectC++/build
      run: cmake ..
      
    - name: Build
      # Build your program with the given configuration
      #run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      working-directory: ${{github.workspace}}/IndividualMiniprojectC++/build
      run: make

    - name: Project Setup
      working-directory: ${{github.workspace}}/IndividualMiniprojectC++/build
      run: ./IndividualMiniproject setup &

    - name: Test
      working-directory: ${{github.workspace}}/IndividualMiniprojectC++/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./IndividualMiniprojectTests

    - name: cpplint
      working-directory: ${{github.workspace}}/IndividualMiniprojectC++/build
      run: make cpplint

    - name: cppcheck
      working-directory: ${{github.workspace}}/IndividualMiniprojectC++/build
      run: make cppcheck
